
AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001082  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001082  00001116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006c  0080006c  00001122  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002796  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00003c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001875  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c8  00000000  00000000  000064f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c0b  00000000  00000000  00006bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000144d  00000000  00000000  000077cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_1>
       8:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_10>
      2c:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
      8a:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_voidInitMaster>:
	/*Enable ACKnowledge bit */
	Set_Bit(TWCR_REG,TWCR_TWEA);
	
	
	/*Enable TWI*/
	Set_Bit(TWCR_REG,TWCR_TWEN);
      92:	96 b7       	in	r25, 0x36	; 54
      94:	90 64       	ori	r25, 0x40	; 64
      96:	96 bf       	out	0x36, r25	; 54
      98:	92 e0       	ldi	r25, 0x02	; 2
      9a:	90 b9       	out	0x00, r25	; 0
      9c:	91 b1       	in	r25, 0x01	; 1
      9e:	9e 7f       	andi	r25, 0xFE	; 254
      a0:	91 b9       	out	0x01, r25	; 1
      a2:	91 b1       	in	r25, 0x01	; 1
      a4:	9d 7f       	andi	r25, 0xFD	; 253
      a6:	91 b9       	out	0x01, r25	; 1
      a8:	96 b7       	in	r25, 0x36	; 54
      aa:	9f 77       	andi	r25, 0x7F	; 127
      ac:	96 bf       	out	0x36, r25	; 54
      ae:	88 23       	and	r24, r24
      b0:	11 f0       	breq	.+4      	; 0xb6 <TWI_voidInitMaster+0x24>
      b2:	88 0f       	add	r24, r24
      b4:	82 b9       	out	0x02, r24	; 2
      b6:	86 b7       	in	r24, 0x36	; 54
      b8:	84 60       	ori	r24, 0x04	; 4
      ba:	86 bf       	out	0x36, r24	; 54
      bc:	08 95       	ret

000000be <TWI_SendStartCondition>:
TWI_ErrStatus TWI_SendStartCondition()
{
	TWI_ErrStatus Local_Error=NoError;
	
	/*Send start condition*/
	Set_Bit(TWCR_REG,TWCR_TWSTA);
      be:	86 b7       	in	r24, 0x36	; 54
      c0:	80 62       	ori	r24, 0x20	; 32
      c2:	86 bf       	out	0x36, r24	; 54
	
	/*to make any change or make any step we need to clear flag*/
	/*Clear the interrupt flag to start the previous operation*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
      c4:	86 b7       	in	r24, 0x36	; 54
      c6:	80 68       	ori	r24, 0x80	; 128
      c8:	86 bf       	out	0x36, r24	; 54
	
	/*wait until the operation finishes and the flag is raised*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
      ca:	06 b6       	in	r0, 0x36	; 54
      cc:	07 fe       	sbrs	r0, 7
      ce:	fd cf       	rjmp	.-6      	; 0xca <TWI_SendStartCondition+0xc>
	
	/*Check the operation status*/
	// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
	if((TWSR_REG & 0xF8)!=START_ACK)
      d0:	81 b1       	in	r24, 0x01	; 1
      d2:	88 7f       	andi	r24, 0xF8	; 248
      d4:	88 30       	cpi	r24, 0x08	; 8
      d6:	11 f4       	brne	.+4      	; 0xdc <TWI_SendStartCondition+0x1e>
	Set_Bit(TWCR_REG,TWCR_TWEN);
}

TWI_ErrStatus TWI_SendStartCondition()
{
	TWI_ErrStatus Local_Error=NoError;
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	08 95       	ret
	
	/*Check the operation status*/
	// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
	if((TWSR_REG & 0xF8)!=START_ACK)
	{
		Local_Error=StartconditionERR;
      dc:	81 e0       	ldi	r24, 0x01	; 1
	{
		//do nothing
	}
	return Local_Error;

}
      de:	08 95       	ret

000000e0 <TWI_SendRepeatedStart>:
TWI_ErrStatus TWI_SendRepeatedStart()
{
	TWI_ErrStatus Local_Error = NoError;
	
	/* enable start condition*/
	Set_Bit(TWCR_REG,TWCR_TWSTA);
      e0:	86 b7       	in	r24, 0x36	; 54
      e2:	80 62       	ori	r24, 0x20	; 32
      e4:	86 bf       	out	0x36, r24	; 54
	
	/*clear the interrupt flag*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
      e6:	86 b7       	in	r24, 0x36	; 54
      e8:	80 68       	ori	r24, 0x80	; 128
      ea:	86 bf       	out	0x36, r24	; 54
	
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
      ec:	06 b6       	in	r0, 0x36	; 54
      ee:	07 fe       	sbrs	r0, 7
      f0:	fd cf       	rjmp	.-6      	; 0xec <TWI_SendRepeatedStart+0xc>
	
	/*Check the operation status*/
	// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
	if((TWSR_REG & 0xF8)!= REP_START_ACK)
      f2:	81 b1       	in	r24, 0x01	; 1
      f4:	88 7f       	andi	r24, 0xF8	; 248
      f6:	80 31       	cpi	r24, 0x10	; 16
      f8:	11 f4       	brne	.+4      	; 0xfe <TWI_SendRepeatedStart+0x1e>

}

TWI_ErrStatus TWI_SendRepeatedStart()
{
	TWI_ErrStatus Local_Error = NoError;
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	08 95       	ret
	
	/*Check the operation status*/
	// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
	if((TWSR_REG & 0xF8)!= REP_START_ACK)
	{
		Local_Error=RepeatedStartError;
      fe:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		// do nothing
	}
	return Local_Error;
}
     100:	08 95       	ret

00000102 <TWI_SendSlaveAddressWithWrite>:
TWI_ErrStatus TWI_SendSlaveAddressWithWrite(uint8 copy_Slaveaddress)
{
	TWI_ErrStatus Local_Error=NoError;
	
	/*set the address slave */
	TWDR_REG=copy_Slaveaddress<<1;
     102:	88 0f       	add	r24, r24
     104:	83 b9       	out	0x03, r24	; 3
	
	/* Enable the write bit*/
	Clear_Bit(TWDR_REG,0);
     106:	83 b1       	in	r24, 0x03	; 3
     108:	8e 7f       	andi	r24, 0xFE	; 254
     10a:	83 b9       	out	0x03, r24	; 3
	
	/*we must clear start condition by software after send the start condition */
	Clear_Bit(TWCR_REG,TWCR_TWSTA);
     10c:	86 b7       	in	r24, 0x36	; 54
     10e:	8f 7d       	andi	r24, 0xDF	; 223
     110:	86 bf       	out	0x36, r24	; 54
	
	/*clear the interrupt flag*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
     112:	86 b7       	in	r24, 0x36	; 54
     114:	80 68       	ori	r24, 0x80	; 128
     116:	86 bf       	out	0x36, r24	; 54
	
	/*wait until the flag rising up*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
     118:	06 b6       	in	r0, 0x36	; 54
     11a:	07 fe       	sbrs	r0, 7
     11c:	fd cf       	rjmp	.-6      	; 0x118 <TWI_SendSlaveAddressWithWrite+0x16>
	
	/* check the condition */
	if((TWSR_REG & 0xF8)!=Slave_ADD_AND_WR_ACK)
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	88 7f       	andi	r24, 0xF8	; 248
     122:	88 31       	cpi	r24, 0x18	; 24
     124:	11 f4       	brne	.+4      	; 0x12a <TWI_SendSlaveAddressWithWrite+0x28>
	return Local_Error;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(uint8 copy_Slaveaddress)
{
	TWI_ErrStatus Local_Error=NoError;
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	08 95       	ret
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
	
	/* check the condition */
	if((TWSR_REG & 0xF8)!=Slave_ADD_AND_WR_ACK)
	{
		Local_Error=SlaveAddressWithWriteErr;
     12a:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		//do nothing 
	}
	return Local_Error;
}
     12c:	08 95       	ret

0000012e <TWI_SendSlaveAddressWithRead>:
TWI_ErrStatus TWI_SendSlaveAddressWithRead(uint8 copy_Slaveaddress)
{
	TWI_ErrStatus Local_Error=NoError;
	
	/*send the 7bit slave address to the bus*/
	TWDR_REG=copy_Slaveaddress<<1;
     12e:	88 0f       	add	r24, r24
     130:	83 b9       	out	0x03, r24	; 3
	
	/*set the read request in the LSB in the data register*/
	Set_Bit(TWDR_REG,0);
     132:	83 b1       	in	r24, 0x03	; 3
     134:	81 60       	ori	r24, 0x01	; 1
     136:	83 b9       	out	0x03, r24	; 3
	
	/*we must clear start condition by software after send the start condition */
	Clear_Bit(TWCR_REG,TWCR_TWSTA);
     138:	86 b7       	in	r24, 0x36	; 54
     13a:	8f 7d       	andi	r24, 0xDF	; 223
     13c:	86 bf       	out	0x36, r24	; 54
	
	/*to make any change or make any step we need to clear flag*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
     13e:	86 b7       	in	r24, 0x36	; 54
     140:	80 68       	ori	r24, 0x80	; 128
     142:	86 bf       	out	0x36, r24	; 54
	
	/*wait until the operation finishes and the flag is raised*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
     144:	06 b6       	in	r0, 0x36	; 54
     146:	07 fe       	sbrs	r0, 7
     148:	fd cf       	rjmp	.-6      	; 0x144 <TWI_SendSlaveAddressWithRead+0x16>
	
	if((TWSR_REG & 0xF8)!=Slave_ADD_AND_RD_ACK)
     14a:	81 b1       	in	r24, 0x01	; 1
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	80 34       	cpi	r24, 0x40	; 64
     150:	11 f4       	brne	.+4      	; 0x156 <TWI_SendSlaveAddressWithRead+0x28>
	return Local_Error;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(uint8 copy_Slaveaddress)
{
	TWI_ErrStatus Local_Error=NoError;
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	08 95       	ret
	/*wait until the operation finishes and the flag is raised*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
	
	if((TWSR_REG & 0xF8)!=Slave_ADD_AND_RD_ACK)
	{
		Local_Error= SlaveAddresswithReadErr;
     156:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		//do nothing
	}
	return Local_Error;
}
     158:	08 95       	ret

0000015a <TWI_MasterWriteDataByte>:
TWI_ErrStatus TWI_MasterWriteDataByte(uint8 copy_DataByte)
{
	TWI_ErrStatus Local_Error = NoError;
	
	/*send the data to the bus */ 
	TWDR_REG = copy_DataByte ;
     15a:	83 b9       	out	0x03, r24	; 3
	
	/* clear the interrupt flag*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
     15c:	86 b7       	in	r24, 0x36	; 54
     15e:	80 68       	ori	r24, 0x80	; 128
     160:	86 bf       	out	0x36, r24	; 54
	
	/*wait until the operation finishes and the flag is raised*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_MasterWriteDataByte+0x8>

	/*Check the operation status*/
	if((TWSR_REG & 0xF8) !=MSTR_WR_BYTE_ACK  )
     168:	81 b1       	in	r24, 0x01	; 1
     16a:	88 7f       	andi	r24, 0xF8	; 248
     16c:	88 32       	cpi	r24, 0x28	; 40
     16e:	11 f4       	brne	.+4      	; 0x174 <TWI_MasterWriteDataByte+0x1a>
	return Local_Error;
}

TWI_ErrStatus TWI_MasterWriteDataByte(uint8 copy_DataByte)
{
	TWI_ErrStatus Local_Error = NoError;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);

	/*Check the operation status*/
	if((TWSR_REG & 0xF8) !=MSTR_WR_BYTE_ACK  )
	{
		Local_Error = MasterWriteByteErr ;
     174:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
}
     176:	08 95       	ret

00000178 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(uint8 *copy_DataByte)
{
     178:	fc 01       	movw	r30, r24
	
	/*we need to imagine the send scenario the master send start 
	 * then address with read and ack then the flag will rise so 
	 * to the address send the data we need to clear the flag first 
	 * to get the CLK work again and the slave can send the data */
	Set_Bit(TWCR_REG,TWCR_TWINT);
     17a:	96 b7       	in	r25, 0x36	; 54
     17c:	90 68       	ori	r25, 0x80	; 128
     17e:	96 bf       	out	0x36, r25	; 54
	
	/*wait until the operation finishes and the flag is raised*/
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
     180:	06 b6       	in	r0, 0x36	; 54
     182:	07 fe       	sbrs	r0, 7
     184:	fd cf       	rjmp	.-6      	; 0x180 <TWI_MasterReadDataByte+0x8>
	
	/*Check the operation status*/
	if((TWSR_REG & 0xF8)!=MSTR_RRD_BYTE_WITH_ACK)
     186:	91 b1       	in	r25, 0x01	; 1
     188:	98 7f       	andi	r25, 0xF8	; 248
     18a:	90 35       	cpi	r25, 0x50	; 80
     18c:	21 f4       	brne	.+8      	; 0x196 <TWI_MasterReadDataByte+0x1e>
	{
		Local_Error=MasterReadByteErr;
	}
	else
	{
		*copy_DataByte = TWDR_REG;
     18e:	83 b1       	in	r24, 0x03	; 3
     190:	80 83       	st	Z, r24
	return Local_Error;
}

TWI_ErrStatus TWI_MasterReadDataByte(uint8 *copy_DataByte)
{
	TWI_ErrStatus Local_Error = NoError;
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	08 95       	ret
	while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
	
	/*Check the operation status*/
	if((TWSR_REG & 0xF8)!=MSTR_RRD_BYTE_WITH_ACK)
	{
		Local_Error=MasterReadByteErr;
     196:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		*copy_DataByte = TWDR_REG;
	}
	return Local_Error;
}
     198:	08 95       	ret

0000019a <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/*Enable the stop condition*/
	Set_Bit(TWCR_REG,TWCR_TWSTO);
     19a:	86 b7       	in	r24, 0x36	; 54
     19c:	80 61       	ori	r24, 0x10	; 16
     19e:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	Set_Bit(TWCR_REG,TWCR_TWINT);
     1a0:	86 b7       	in	r24, 0x36	; 54
     1a2:	80 68       	ori	r24, 0x80	; 128
     1a4:	86 bf       	out	0x36, r24	; 54
     1a6:	08 95       	ret

000001a8 <Button_init>:
 */ 

#include "Button.h"

void Button_init(uint8 pin_id, uint8 port_id)
{
     1a8:	98 2f       	mov	r25, r24
     1aa:	86 2f       	mov	r24, r22
	DIO_set_pin_direction(port_id,pin_id,input);
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	69 2f       	mov	r22, r25
     1b0:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
     1b4:	08 95       	ret

000001b6 <Button_read>:
}


uint8 Button_read(uint8 pin_id, uint8 port_id  )
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	98 2f       	mov	r25, r24
     1c2:	86 2f       	mov	r24, r22
	EN_Dio_Value val;
	DIO_get_pin_value(port_id,pin_id,&val);
     1c4:	ae 01       	movw	r20, r28
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	69 2f       	mov	r22, r25
     1cc:	0e 94 89 05 	call	0xb12	; 0xb12 <DIO_get_pin_value>
	return val ; 
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <EEPROM_Write>:

#include "EEPROM.h"
#include "EEPROM_Private.h"
#include <util\delay.h>
void EEPROM_Write(uint16 location_Address,uint8 Copy_Data)
{
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	d8 2f       	mov	r29, r24
     1e2:	c6 2f       	mov	r28, r22
	// data is 10 bit bec EEPROM 8 K
	// 1010 000 --> 1010 A2 B10 B9 
	uint8 location_Address_Packet=EEPROM_FIXED_ADDRESS | (A2_Connection<<2) |(uint8)(location_Address>>8); // from location add we need the first 3 bit for add location
     1e4:	19 2f       	mov	r17, r25
     1e6:	10 65       	ori	r17, 0x50	; 80
	//send start condition
	TWI_SendStartCondition();
     1e8:	0e 94 5f 00 	call	0xbe	; 0xbe <TWI_SendStartCondition>
	//send the addressPacket
	TWI_SendSlaveAddressWithWrite(location_Address_Packet);
     1ec:	81 2f       	mov	r24, r17
     1ee:	0e 94 81 00 	call	0x102	; 0x102 <TWI_SendSlaveAddressWithWrite>
	// send the rest 8bit of the location address
	TWI_MasterWriteDataByte((uint8)location_Address);
     1f2:	8d 2f       	mov	r24, r29
     1f4:	0e 94 ad 00 	call	0x15a	; 0x15a <TWI_MasterWriteDataByte>
	// send the data 
	TWI_MasterWriteDataByte(Copy_Data);
     1f8:	8c 2f       	mov	r24, r28
     1fa:	0e 94 ad 00 	call	0x15a	; 0x15a <TWI_MasterWriteDataByte>
	//stop the condition of TWI
	TWI_SendStopCondition();
     1fe:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_SendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     202:	83 ec       	ldi	r24, 0xC3	; 195
     204:	99 e0       	ldi	r25, 0x09	; 9
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <EEPROM_Write+0x2c>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <EEPROM_Write+0x32>
     20c:	00 00       	nop
	//delay for 10 ms to write in the memory 
	_delay_ms(10);
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	08 95       	ret

00000216 <EEPROM_Read>:


uint8 EEPROM_Read(uint16 location_Address)
{
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	08 2f       	mov	r16, r24
	uint8 data ;
	uint8 local_AddressPacket=EEPROM_FIXED_ADDRESS | (A2_Connection<<2) |(uint8)(location_Address>>8);
     226:	19 2f       	mov	r17, r25
     228:	10 65       	ori	r17, 0x50	; 80
	TWI_SendStartCondition();
     22a:	0e 94 5f 00 	call	0xbe	; 0xbe <TWI_SendStartCondition>
	// 7 bit slave with write to can be able to send the rest 8 bit of location address
	TWI_SendSlaveAddressWithWrite(local_AddressPacket);
     22e:	81 2f       	mov	r24, r17
     230:	0e 94 81 00 	call	0x102	; 0x102 <TWI_SendSlaveAddressWithWrite>
	// send the rest of 8 bits 
	TWI_MasterWriteDataByte((uint8)location_Address);
     234:	80 2f       	mov	r24, r16
     236:	0e 94 ad 00 	call	0x15a	; 0x15a <TWI_MasterWriteDataByte>
	// send repeated start
	TWI_SendRepeatedStart();
     23a:	0e 94 70 00 	call	0xe0	; 0xe0 <TWI_SendRepeatedStart>
	// send slave add with read
	TWI_SendSlaveAddressWithRead(local_AddressPacket);
     23e:	81 2f       	mov	r24, r17
     240:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_SendSlaveAddressWithRead>
	// read the send data 
	TWI_MasterReadDataByte(&data);
     244:	ce 01       	movw	r24, r28
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	0e 94 bc 00 	call	0x178	; 0x178 <TWI_MasterReadDataByte>
	//send stop condition
	TWI_SendStopCondition();
     24c:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_SendStopCondition>
	return data;
}
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <LCD_Send_Command>:
	} 
	/*4- to display the figure position back to DDRAM  (ht3rdha feen yasta)*/
	LCD_ChangePOS_XY(XPOS,YPOS);
	/*5- to display data that store in CGRAM : send the pattern Number */
	LCD_Send_Data(pattern_no);
}
     25e:	cf 93       	push	r28
     260:	c8 2f       	mov	r28, r24
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	65 e0       	ldi	r22, 0x05	; 5
     266:	82 e0       	ldi	r24, 0x02	; 2
     268:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	64 e0       	ldi	r22, 0x04	; 4
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     276:	6c 2f       	mov	r22, r28
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_set_port_char>
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	63 e0       	ldi	r22, 0x03	; 3
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     288:	83 ef       	ldi	r24, 0xF3	; 243
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_Send_Command+0x2e>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Send_Command+0x34>
     292:	00 00       	nop
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <LCD_Send_Data>:
     2a2:	cf 93       	push	r28
     2a4:	c8 2f       	mov	r28, r24
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	65 e0       	ldi	r22, 0x05	; 5
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	64 e0       	ldi	r22, 0x04	; 4
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     2ba:	6c 2f       	mov	r22, r28
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 c1 05 	call	0xb82	; 0xb82 <DIO_set_port_char>
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     2cc:	83 ef       	ldi	r24, 0xF3	; 243
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_Send_Data+0x2e>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_Send_Data+0x34>
     2d6:	00 00       	nop
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	63 e0       	ldi	r22, 0x03	; 3
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <LCD_INIT>:
     2e6:	8f e0       	ldi	r24, 0x0F	; 15
     2e8:	97 e2       	ldi	r25, 0x27	; 39
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_INIT+0x4>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_INIT+0xa>
     2f0:	00 00       	nop
     2f2:	88 e3       	ldi	r24, 0x38	; 56
     2f4:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Send_Command>
     2f8:	8c e0       	ldi	r24, 0x0C	; 12
     2fa:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Send_Command>
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Send_Command>
     304:	08 95       	ret

00000306 <LCD_sendString>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	8c 01       	movw	r16, r24
     30e:	c0 e0       	ldi	r28, 0x00	; 0
     310:	03 c0       	rjmp	.+6      	; 0x318 <LCD_sendString+0x12>
     312:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Send_Data>
     316:	cf 5f       	subi	r28, 0xFF	; 255
     318:	f8 01       	movw	r30, r16
     31a:	ec 0f       	add	r30, r28
     31c:	f1 1d       	adc	r31, r1
     31e:	80 81       	ld	r24, Z
     320:	81 11       	cpse	r24, r1
     322:	f7 cf       	rjmp	.-18     	; 0x312 <LCD_sendString+0xc>
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	08 95       	ret

0000032c <LCD_ChangePOS_XY>:
     32c:	61 11       	cpse	r22, r1
     32e:	06 c0       	rjmp	.+12     	; 0x33c <LCD_ChangePOS_XY+0x10>
     330:	98 2f       	mov	r25, r24
     332:	20 e4       	ldi	r18, 0x40	; 64
     334:	62 9f       	mul	r22, r18
     336:	90 0d       	add	r25, r0
     338:	11 24       	eor	r1, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <LCD_ChangePOS_XY+0x12>
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	61 30       	cpi	r22, 0x01	; 1
     340:	29 f4       	brne	.+10     	; 0x34c <LCD_ChangePOS_XY+0x20>
     342:	98 2f       	mov	r25, r24
     344:	20 e4       	ldi	r18, 0x40	; 64
     346:	62 9f       	mul	r22, r18
     348:	90 0d       	add	r25, r0
     34a:	11 24       	eor	r1, r1
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	89 0f       	add	r24, r25
     350:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Send_Command>
     354:	08 95       	ret

00000356 <LCD_INIT_DIR>:

void LCD_INIT_DIR()
{
	DIO_set_pin_direction(LCD_DATA_PORT,pin0,output);
     356:	41 e0       	ldi	r20, 0x01	; 1
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin1,output);
     360:	41 e0       	ldi	r20, 0x01	; 1
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin2,output);
     36a:	41 e0       	ldi	r20, 0x01	; 1
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin3,output);
     374:	41 e0       	ldi	r20, 0x01	; 1
     376:	63 e0       	ldi	r22, 0x03	; 3
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	
	DIO_set_pin_direction(LCD_DATA_PORT,pin4,output);
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	64 e0       	ldi	r22, 0x04	; 4
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin5,output);
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	65 e0       	ldi	r22, 0x05	; 5
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin6,output);
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	66 e0       	ldi	r22, 0x06	; 6
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_DATA_PORT,pin7,output);
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	67 e0       	ldi	r22, 0x07	; 7
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	
	DIO_set_pin_direction(LCD_CTRL_PORT,LCD_E_PIN,output);
     3a6:	41 e0       	ldi	r20, 0x01	; 1
     3a8:	63 e0       	ldi	r22, 0x03	; 3
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_CTRL_PORT,LCD_RW_PIN,output);
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	64 e0       	ldi	r22, 0x04	; 4
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_CTRL_PORT,LCD_RS_PIN,output);
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	65 e0       	ldi	r22, 0x05	; 5
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
     3c4:	08 95       	ret

000003c6 <LCD_Clear>:



void LCD_Clear()
{
	LCD_Send_Command(1);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Send_Command>
     3cc:	08 95       	ret

000003ce <LCD_VoidIntgerToString>:
}


void LCD_VoidIntgerToString (uint16 num)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	60 97       	sbiw	r28, 0x10	; 16
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3e2:	4a e0       	ldi	r20, 0x0A	; 10
     3e4:	be 01       	movw	r22, r28
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	0e 94 0a 08 	call	0x1014	; 0x1014 <__itoa_ncheck>
	uint8 buff[16];
	itoa(num, buff, 10);
	LCD_sendString(buff);
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	0e 94 83 01 	call	0x306	; 0x306 <LCD_sendString>
     3f6:	60 96       	adiw	r28, 0x10	; 16
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <led_init>:
#include "../../MCAL/DIO/DIO.h"
#include "led.h"
#include <avr/delay.h>

void led_init(uint8 pin_id , uint8 port_id)
{
     408:	98 2f       	mov	r25, r24
     40a:	86 2f       	mov	r24, r22
	DIO_set_pin_direction(port_id,pin_id,output);
     40c:	41 e0       	ldi	r20, 0x01	; 1
     40e:	69 2f       	mov	r22, r25
     410:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_set_pin_direction>
     414:	08 95       	ret

00000416 <led_on>:
}

void led_on(uint8 pin_id , uint8 port_id)
{
     416:	98 2f       	mov	r25, r24
     418:	86 2f       	mov	r24, r22
	DIO_set_pin_value(port_id,pin_id,HIGH);
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	69 2f       	mov	r22, r25
     41e:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     422:	08 95       	ret

00000424 <led_off>:
}

void led_off(uint8 pin_id , uint8 port_id)
{
     424:	98 2f       	mov	r25, r24
     426:	86 2f       	mov	r24, r22
	DIO_set_pin_value(port_id,pin_id,LOW);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	69 2f       	mov	r22, r25
     42c:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_set_pin_value>
     430:	08 95       	ret

00000432 <led_blink>:
}

void led_blink(uint8 pin_id , uint8 port_id)
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	c8 2f       	mov	r28, r24
     438:	d6 2f       	mov	r29, r22
	led_on(pin_id,port_id);
     43a:	0e 94 0b 02 	call	0x416	; 0x416 <led_on>
     43e:	2f e9       	ldi	r18, 0x9F	; 159
     440:	86 e8       	ldi	r24, 0x86	; 134
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <led_blink+0x12>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <led_blink+0x1c>
     44e:	00 00       	nop
	_delay_ms(500);
	led_off(pin_id,port_id);
     450:	6d 2f       	mov	r22, r29
     452:	8c 2f       	mov	r24, r28
     454:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
     458:	2f e9       	ldi	r18, 0x9F	; 159
     45a:	86 e8       	ldi	r24, 0x86	; 134
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <led_blink+0x2c>
     466:	00 c0       	rjmp	.+0      	; 0x468 <led_blink+0x36>
     468:	00 00       	nop
	_delay_ms(500);
	
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <temp_inter>:

// this function used to cal temp every 100 ms 
// i used normal mode timer 0  we cal the value for preload =44
// and the tick number =49 
void temp_inter()
{	
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	00 d0       	rcall	.+0      	; 0x476 <temp_inter+0x6>
     476:	00 d0       	rcall	.+0      	; 0x478 <temp_inter+0x8>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	// local counter to cal the the timer 100ms
	uint8 static local_counter=0;
	local_counter++;
     47c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	// if 100ms done cal the temp
	if(local_counter==49)
     486:	81 33       	cpi	r24, 0x31	; 49
     488:	61 f5       	brne	.+88     	; 0x4e2 <temp_inter+0x72>
	{
		uint16 volatile reading , analog;
		// start conversion and save in reading
		reading= ADC_Start_Conversion(pin0);
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 16 04 	call	0x82c	; 0x82c <ADC_Start_Conversion>
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	8b 83       	std	Y+3, r24	; 0x03
		//analog = (uint32)(reading)*(5000)/(uint32)(256);
		// temp equation for the simulation 
		analog = (uint32)(reading)* (500.0 / 1023.0*500)/12;
     496:	6b 81       	ldd	r22, Y+3	; 0x03
     498:	7c 81       	ldd	r23, Y+4	; 0x04
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 00 07 	call	0xe00	; 0xe00 <__floatunsisf>
     4a2:	29 e1       	ldi	r18, 0x19	; 25
     4a4:	31 e6       	ldi	r19, 0x61	; 97
     4a6:	44 e7       	ldi	r20, 0x74	; 116
     4a8:	53 e4       	ldi	r21, 0x43	; 67
     4aa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e4       	ldi	r20, 0x40	; 64
     4b4:	51 e4       	ldi	r21, 0x41	; 65
     4b6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__divsf3>
     4ba:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fixunssfsi>
     4be:	7a 83       	std	Y+2, r23	; 0x02
     4c0:	69 83       	std	Y+1, r22	; 0x01
		// the temp after cal
		current_temp=analog/10;
     4c2:	29 81       	ldd	r18, Y+1	; 0x01
     4c4:	3a 81       	ldd	r19, Y+2	; 0x02
     4c6:	ad ec       	ldi	r26, 0xCD	; 205
     4c8:	bc ec       	ldi	r27, 0xCC	; 204
     4ca:	0e 94 fb 07 	call	0xff6	; 0xff6 <__umulhisi3>
     4ce:	96 95       	lsr	r25
     4d0:	87 95       	ror	r24
     4d2:	96 95       	lsr	r25
     4d4:	87 95       	ror	r24
     4d6:	96 95       	lsr	r25
     4d8:	87 95       	ror	r24
     4da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <current_temp>
		//reset the counter for new 100 ms
		local_counter=0;
     4de:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	}
}
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <main>:
int main(void)
{
	

	// on off button
	Button_init(button_power, PORTD);
     4f0:	63 e0       	ldi	r22, 0x03	; 3
     4f2:	87 e0       	ldi	r24, 0x07	; 7
     4f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Button_init>
	// Heating led
	led_init(led_Heating, PORTD);
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 04 02 	call	0x408	; 0x408 <led_init>
	// on_oFF led
	led_init(led_power, PORTD);
     500:	63 e0       	ldi	r22, 0x03	; 3
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 04 02 	call	0x408	; 0x408 <led_init>
	// lcd init dir
	LCD_INIT_DIR();
     508:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_INIT_DIR>
	
	// lcd init the lcd
	LCD_INIT();
     50c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_INIT>

	TWI_voidInitMaster(0);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 49 00 	call	0x92	; 0x92 <TWI_voidInitMaster>
	//EEPROM send data with location 100
	EEPROM_Write(EEPROM_ideal_temp_location,ideal_temp);
     516:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <ideal_temp>
     51a:	84 e6       	ldi	r24, 0x64	; 100
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 ed 00 	call	0x1da	; 0x1da <EEPROM_Write>
	
	temp_EEPROM = EEPROM_Read(EEPROM_take_temp_location); // read the value that take from user
     522:	87 e6       	ldi	r24, 0x67	; 103
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 0b 01 	call	0x216	; 0x216 <EEPROM_Read>
     52a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <temp_EEPROM>
	// ADC init
	ADC_init();
     52e:	0e 94 03 04 	call	0x806	; 0x806 <ADC_init>
	// temp sensor int
	// init EXTI0 for the button up temp
	EXT0_Interrupt_enable();
     532:	0e 94 d7 05 	call	0xbae	; 0xbae <EXT0_Interrupt_enable>
	// init EXTI1 for the button up temp
	EXT1_Interrupt_enable();
     536:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EXT1_Interrupt_enable>
	// open Global Interrupt
	global_inti_Enable();
     53a:	0e 94 d3 05 	call	0xba6	; 0xba6 <global_inti_Enable>
	//timer zero init
	Timer0_init();
     53e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Timer0_init>
	//timer zero interrupt normal mode for cal temp every 100 ms
	timer0_setCallBack(temp_inter);
     542:	88 e3       	ldi	r24, 0x38	; 56
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 03 06 	call	0xc06	; 0xc06 <timer0_setCallBack>
	
	while(1)
	{
		// get the button state on -off
		if(Button_read(button_power, PORTC)==0)
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	87 e0       	ldi	r24, 0x07	; 7
     54e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Button_read>
     552:	81 11       	cpse	r24, r1
     554:	08 c0       	rjmp	.+16     	; 0x566 <main+0x76>
		{ // if button is off

			//led heating off
			led_off(led_Heating, PORTD);
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
			// led power off
			led_off(led_power, PORTD);
     55c:	63 e0       	ldi	r22, 0x03	; 3
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
     564:	f2 cf       	rjmp	.-28     	; 0x54a <main+0x5a>

		}

		// power on
		else if(Button_read(button_power, PORTC)==1)
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	87 e0       	ldi	r24, 0x07	; 7
     56a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Button_read>
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	61 f7       	brne	.-40     	; 0x54a <main+0x5a>
		{
			// power led on
			led_on(led_power, PORTD);
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	0e 94 0b 02 	call	0x416	; 0x416 <led_on>
			//lcd clear
			LCD_Clear();
     578:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_Clear>
			// send the temp value to lcd
			LCD_sendString("temp: ");
     57c:	84 e6       	ldi	r24, 0x64	; 100
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 83 01 	call	0x306	; 0x306 <LCD_sendString>
			// send the temp value to lcd
			LCD_VoidIntgerToString(current_temp);
     584:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <current_temp>
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_VoidIntgerToString>
	
			// if user didn't give him value the temp work at ideal temp
			if (take_temp==0 && (temp_EEPROM==0xFF))
     58e:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <take_temp>
     592:	41 11       	cpse	r20, r1
     594:	53 c0       	rjmp	.+166    	; 0x63c <main+0x14c>
     596:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <temp_EEPROM>
     59a:	8f 3f       	cpi	r24, 0xFF	; 255
     59c:	09 f0       	breq	.+2      	; 0x5a0 <main+0xb0>
     59e:	4e c0       	rjmp	.+156    	; 0x63c <main+0x14c>
			{
				// the value inside EEProm
				if (current_temp<=ideal_temp-5)  // current < 60-5
     5a0:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <current_temp>
     5a4:	25 2f       	mov	r18, r21
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <ideal_temp>
     5ac:	86 2f       	mov	r24, r22
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	35 97       	sbiw	r30, 0x05	; 5
     5b4:	e2 17       	cp	r30, r18
     5b6:	f3 07       	cpc	r31, r19
     5b8:	2c f0       	brlt	.+10     	; 0x5c4 <main+0xd4>
				{
					// open the heater ( i.e blinking)
					led_blink(led_Heating, PORTD);
     5ba:	63 e0       	ldi	r22, 0x03	; 3
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 19 02 	call	0x432	; 0x432 <led_blink>
     5c2:	c3 cf       	rjmp	.-122    	; 0x54a <main+0x5a>
				//	temp_cal(&current_temp);
				
					
				}
				else if (current_temp>ideal_temp+5)
     5c4:	05 96       	adiw	r24, 0x05	; 5
     5c6:	82 17       	cp	r24, r18
     5c8:	93 07       	cpc	r25, r19
     5ca:	2c f4       	brge	.+10     	; 0x5d6 <main+0xe6>
				{
					// open the cooler ( i.e blinking)
					led_on(led_Heating, PORTD);
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 0b 02 	call	0x416	; 0x416 <led_on>
     5d4:	ba cf       	rjmp	.-140    	; 0x54a <main+0x5a>
		//			temp_cal(&current_temp);
				
				}
				else if (current_temp==ideal_temp)
     5d6:	56 13       	cpse	r21, r22
     5d8:	b8 cf       	rjmp	.-144    	; 0x54a <main+0x5a>
				{
					// the temp go to the right temp
					// NOTE : after reading 10 time and take the (avr) turn off or on
					// cal the avr temp if avr == current temp == the take temp
					for(i=0;i<10;i++)
     5da:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <i>
     5de:	0d c0       	rjmp	.+26     	; 0x5fa <main+0x10a>
					{
		//				temp_cal(&current_temp);
						Summation+=current_temp;  // 10 reading
     5e0:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <Summation>
     5e4:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <Summation+0x1>
     5e8:	25 0f       	add	r18, r21
     5ea:	31 1d       	adc	r19, r1
     5ec:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <Summation+0x1>
     5f0:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <Summation>
				else if (current_temp==ideal_temp)
				{
					// the temp go to the right temp
					// NOTE : after reading 10 time and take the (avr) turn off or on
					// cal the avr temp if avr == current temp == the take temp
					for(i=0;i<10;i++)
     5f4:	8f 5f       	subi	r24, 0xFF	; 255
     5f6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <i>
     5fa:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <i>
     5fe:	8a 30       	cpi	r24, 0x0A	; 10
     600:	78 f3       	brcs	.-34     	; 0x5e0 <main+0xf0>
					{
		//				temp_cal(&current_temp);
						Summation+=current_temp;  // 10 reading

					}
					avr= Summation/10;
     602:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <Summation>
     606:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <Summation+0x1>
     60a:	ad ec       	ldi	r26, 0xCD	; 205
     60c:	bc ec       	ldi	r27, 0xCC	; 204
     60e:	0e 94 fb 07 	call	0xff6	; 0xff6 <__umulhisi3>
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	96 95       	lsr	r25
     618:	87 95       	ror	r24
     61a:	96 95       	lsr	r25
     61c:	87 95       	ror	r24
     61e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <avr>
					if(avr==take_temp)
     622:	48 13       	cpse	r20, r24
     624:	92 cf       	rjmp	.-220    	; 0x54a <main+0x5a>
					{
						led_off(led_Heating, PORTD);
     626:	63 e0       	ldi	r22, 0x03	; 3
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
						Summation=0;
     62e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Summation+0x1>
     632:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Summation>
						avr=0;
     636:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <avr>
     63a:	87 cf       	rjmp	.-242    	; 0x54a <main+0x5a>

				}

			}
			// if the button up or down pressed
			else if ( ! (temp_EEPROM==0xFF))   // ie counter == eeprom read
     63c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <temp_EEPROM>
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	09 f4       	brne	.+2      	; 0x646 <main+0x156>
     644:	82 cf       	rjmp	.-252    	; 0x54a <main+0x5a>
			{
				
				// show the value of the temp that be take from user
					LCD_ChangePOS_XY(0,1);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_ChangePOS_XY>
					LCD_sendString("temp: ");
     64e:	84 e6       	ldi	r24, 0x64	; 100
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 83 01 	call	0x306	; 0x306 <LCD_sendString>
					LCD_VoidIntgerToString(temp_EEPROM);
     656:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <temp_EEPROM>
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_VoidIntgerToString>

				// check the value of the temp that take from user ( i.e button up or down )
				if ((current_temp<(take_temp-5)))
     660:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <current_temp>
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <take_temp>
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	05 97       	sbiw	r24, 0x05	; 5
     66e:	28 17       	cp	r18, r24
     670:	39 07       	cpc	r19, r25
     672:	24 f4       	brge	.+8      	; 0x67c <main+0x18c>
				{
					// open the heater ( i.e blinking)
					led_blink(led_Heating, PORTD);
     674:	63 e0       	ldi	r22, 0x03	; 3
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 19 02 	call	0x432	; 0x432 <led_blink>
			//		temp_cal(&current_temp);
					
			
				}
				if (current_temp>take_temp+5)
     67c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <current_temp>
     680:	69 2f       	mov	r22, r25
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <take_temp>
     688:	24 2f       	mov	r18, r20
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	2b 5f       	subi	r18, 0xFB	; 251
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	26 17       	cp	r18, r22
     692:	37 07       	cpc	r19, r23
     694:	2c f4       	brge	.+10     	; 0x6a0 <main+0x1b0>
				{
					// open the cooler ( i.e blinking)
					led_on(led_Heating, PORTD);
     696:	63 e0       	ldi	r22, 0x03	; 3
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 0b 02 	call	0x416	; 0x416 <led_on>
     69e:	55 cf       	rjmp	.-342    	; 0x54a <main+0x5a>

				}
				else if (current_temp==take_temp)
     6a0:	94 13       	cpse	r25, r20
     6a2:	53 cf       	rjmp	.-346    	; 0x54a <main+0x5a>
				{
					// the temp go to the right temp
					// NOTE : after reading 10 time and take the (avr) turn off or on
					// cal the avr temp if avr == current temp == the take temp
					for(i=0;i<10;i++)
     6a4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <i>
     6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <main+0x1d4>
					{
			//			temp_cal(&current_temp);
						Summation+=current_temp;
     6aa:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <Summation>
     6ae:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <Summation+0x1>
     6b2:	29 0f       	add	r18, r25
     6b4:	31 1d       	adc	r19, r1
     6b6:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <Summation+0x1>
     6ba:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <Summation>
				else if (current_temp==take_temp)
				{
					// the temp go to the right temp
					// NOTE : after reading 10 time and take the (avr) turn off or on
					// cal the avr temp if avr == current temp == the take temp
					for(i=0;i<10;i++)
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <i>
     6c4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <i>
     6c8:	8a 30       	cpi	r24, 0x0A	; 10
     6ca:	78 f3       	brcs	.-34     	; 0x6aa <main+0x1ba>
					{
			//			temp_cal(&current_temp);
						Summation+=current_temp;
						
					}
					avr= Summation/10;
     6cc:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <Summation>
     6d0:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <Summation+0x1>
     6d4:	ad ec       	ldi	r26, 0xCD	; 205
     6d6:	bc ec       	ldi	r27, 0xCC	; 204
     6d8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__umulhisi3>
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <avr>
					if(avr==take_temp)
     6ec:	48 13       	cpse	r20, r24
     6ee:	2d cf       	rjmp	.-422    	; 0x54a <main+0x5a>
					{
						led_off(led_Heating, PORTD);
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 12 02 	call	0x424	; 0x424 <led_off>
						Summation=0;
     6f8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Summation+0x1>
     6fc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Summation>
						avr=0;
     700:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <avr>
     704:	22 cf       	rjmp	.-444    	; 0x54a <main+0x5a>

00000706 <__vector_1>:




ISR (EXTI_INT_0)
{
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	// count the button up pressed
	button_up(& counter,& max_temp);
     728:	63 e6       	ldi	r22, 0x63	; 99
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e6       	ldi	r24, 0x60	; 96
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 ef 03 	call	0x7de	; 0x7de <button_up>
		// take the value and put it to take temp var
		take_temp=counter;
     734:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     738:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <take_temp>
		//  save the take temp of user in EEPROM
	EEPROM_Write(EEPROM_take_temp_location,take_temp);
     73c:	87 e6       	ldi	r24, 0x67	; 103
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 ed 00 	call	0x1da	; 0x1da <EEPROM_Write>
	temp_EEPROM=EEPROM_Read(EEPROM_take_temp_location);
     744:	87 e6       	ldi	r24, 0x67	; 103
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 0b 01 	call	0x216	; 0x216 <EEPROM_Read>
     74c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <temp_EEPROM>
}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_2>:

ISR (EXTI_INI_1)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
	// count button down pressed
	button_down(& counter,& min_temp);
     794:	62 e6       	ldi	r22, 0x62	; 98
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e6       	ldi	r24, 0x60	; 96
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <button_down>
	// take the value and put it to take temp var
	take_temp=counter;
     7a0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7a4:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <take_temp>
	//  save the take temp of user in EEPROM
	EEPROM_Write(EEPROM_take_temp_location,take_temp);
     7a8:	87 e6       	ldi	r24, 0x67	; 103
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 ed 00 	call	0x1da	; 0x1da <EEPROM_Write>
	temp_EEPROM=EEPROM_Read(EEPROM_take_temp_location);
     7b0:	87 e6       	ldi	r24, 0x67	; 103
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 0b 01 	call	0x216	; 0x216 <EEPROM_Read>
     7b8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <temp_EEPROM>
}
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <button_up>:
	*copy_address_temp=analog/10;
}

// this function for count up the button from the user to cal the temp that take from user
void button_up(uint8 * counter,uint8 * max_temp)
{
     7de:	fc 01       	movw	r30, r24
		// inc by 5 per pressed
		*counter+=5;
     7e0:	90 81       	ld	r25, Z
     7e2:	9b 5f       	subi	r25, 0xFB	; 251
     7e4:	90 83       	st	Z, r25
		// if exceed the max temp return the counter to the max
		if(*counter>=*max_temp)
     7e6:	db 01       	movw	r26, r22
     7e8:	8c 91       	ld	r24, X
     7ea:	98 17       	cp	r25, r24
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <button_up+0x12>
		{
			*counter =*max_temp;
     7ee:	80 83       	st	Z, r24
     7f0:	08 95       	ret

000007f2 <button_down>:
		}
}

// this function for count down the button from the user to cal the temp that take from user
void button_down(uint8 * counter,uint8 * min_temp)
{
     7f2:	fc 01       	movw	r30, r24
		//dec the counter by -5
		*counter-=5;
     7f4:	90 81       	ld	r25, Z
     7f6:	95 50       	subi	r25, 0x05	; 5
     7f8:	90 83       	st	Z, r25
		// if less than the min temp ret
		if(*counter<=*min_temp)
     7fa:	db 01       	movw	r26, r22
     7fc:	8c 91       	ld	r24, X
     7fe:	89 17       	cp	r24, r25
     800:	08 f0       	brcs	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{
			*counter =*min_temp;
     802:	80 83       	st	Z, r24
     804:	08 95       	ret

00000806 <ADC_init>:
	else
	{
		local_errorState = NULL_POINTER;
	}
	return local_errorState;
}
     806:	87 b1       	in	r24, 0x07	; 7
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	87 b9       	out	0x07, r24	; 7
     80c:	87 b1       	in	r24, 0x07	; 7
     80e:	8f 77       	andi	r24, 0x7F	; 127
     810:	87 b9       	out	0x07, r24	; 7
     812:	87 b1       	in	r24, 0x07	; 7
     814:	80 62       	ori	r24, 0x20	; 32
     816:	87 b9       	out	0x07, r24	; 7
     818:	86 b1       	in	r24, 0x06	; 6
     81a:	88 7f       	andi	r24, 0xF8	; 248
     81c:	86 b9       	out	0x06, r24	; 6
     81e:	86 b1       	in	r24, 0x06	; 6
     820:	83 60       	ori	r24, 0x03	; 3
     822:	86 b9       	out	0x06, r24	; 6
     824:	86 b1       	in	r24, 0x06	; 6
     826:	80 68       	ori	r24, 0x80	; 128
     828:	86 b9       	out	0x06, r24	; 6
     82a:	08 95       	ret

0000082c <ADC_Start_Conversion>:
     82c:	97 b1       	in	r25, 0x07	; 7
     82e:	90 7e       	andi	r25, 0xE0	; 224
     830:	97 b9       	out	0x07, r25	; 7
     832:	97 b1       	in	r25, 0x07	; 7
     834:	89 2b       	or	r24, r25
     836:	87 b9       	out	0x07, r24	; 7
     838:	86 b1       	in	r24, 0x06	; 6
     83a:	80 64       	ori	r24, 0x40	; 64
     83c:	86 b9       	out	0x06, r24	; 6
     83e:	34 9b       	sbis	0x06, 4	; 6
     840:	fe cf       	rjmp	.-4      	; 0x83e <ADC_Start_Conversion+0x12>
     842:	86 b1       	in	r24, 0x06	; 6
     844:	80 61       	ori	r24, 0x10	; 16
     846:	86 b9       	out	0x06, r24	; 6
     848:	85 b1       	in	r24, 0x05	; 5
     84a:	08 95       	ret

0000084c <__vector_16>:


/*ADC ISR  (Number of ISR -1)----> 17 - 1 = 16 */ 
void __vector_16 (void)  __attribute__((signal));
void __vector_16(void)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
	if(ADC_ISR_Source==SINGLE_CONVERSION)
     86e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <ADC_ISR_Source>
     872:	81 11       	cpse	r24, r1
     874:	15 c0       	rjmp	.+42     	; 0x8a0 <__stack+0x41>
	{
		
			/*Read the conversion result*/
			*ADC_ConversionResult=ADCH;
     876:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <ADC_ConversionResult>
     87a:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <ADC_ConversionResult+0x1>
     87e:	85 b1       	in	r24, 0x05	; 5
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	91 83       	std	Z+1, r25	; 0x01
     884:	80 83       	st	Z, r24
			/*release the ADC busy State ,ADC is now empty*/
			ADC_State=empty;
     886:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <ADC_State>
			/*Disable the ADC conversion complete interrupt*/
			Clear_Bit(ADCSRA_REG,ADIE);
     88a:	86 b1       	in	r24, 0x06	; 6
     88c:	87 7f       	andi	r24, 0xF7	; 247
     88e:	86 b9       	out	0x06, r24	; 6
			/*Invoke the callback notification function*/
			if(ADC_NotificationFunc!=NULL)
     890:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ADC_NotificationFunc>
     894:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ADC_NotificationFunc+0x1>
     898:	30 97       	sbiw	r30, 0x00	; 0
     89a:	c1 f1       	breq	.+112    	; 0x90c <__stack+0xad>
			{
				ADC_NotificationFunc();
     89c:	09 95       	icall
     89e:	36 c0       	rjmp	.+108    	; 0x90c <__stack+0xad>
			}	
	}
	else // ISR source is chain conversion
	{
		/*read the conversion result*/
		ADC_ConversionResult[ADC_ChainIndex]=ADCH;
     8a0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_ChainIndex>
     8a4:	e8 2f       	mov	r30, r24
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <ADC_ConversionResult>
     8b0:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <ADC_ConversionResult+0x1>
     8b4:	e2 0f       	add	r30, r18
     8b6:	f3 1f       	adc	r31, r19
     8b8:	25 b1       	in	r18, 0x05	; 5
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	31 83       	std	Z+1, r19	; 0x01
     8be:	20 83       	st	Z, r18
		
		/* inc the index to get the next channel result*/
		ADC_ChainIndex++;
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <ADC_ChainIndex>
		
		/*check if the ADC chain == index : its finished the chain*/
		if(ADC_ChainIndex==ADC_ChainSize)
     8c6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <ADC_ChainSize>
     8ca:	89 13       	cpse	r24, r25
     8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__stack+0x89>
		{
			/*chain is finished & adc is empty*/
			ADC_State=empty;
     8ce:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <ADC_State>
			/*Disable the ADC conversion complete interrupt*/
			Clear_Bit(ADCSRA_REG,ADIE);
     8d2:	86 b1       	in	r24, 0x06	; 6
     8d4:	87 7f       	andi	r24, 0xF7	; 247
     8d6:	86 b9       	out	0x06, r24	; 6
			/*Invoke the callback notification function*/
			if(ADC_NotificationFunc!=NULL)
     8d8:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ADC_NotificationFunc>
     8dc:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ADC_NotificationFunc+0x1>
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	a1 f0       	breq	.+40     	; 0x90c <__stack+0xad>
			{
				ADC_NotificationFunc();
     8e4:	09 95       	icall
     8e6:	12 c0       	rjmp	.+36     	; 0x90c <__stack+0xad>
		}
		else
		{
			/*chain isn't finished*/
			/*set required channel*/
			ADMUX_REG&= ADMUX_MASK;
     8e8:	87 b1       	in	r24, 0x07	; 7
     8ea:	80 7e       	andi	r24, 0xE0	; 224
     8ec:	87 b9       	out	0x07, r24	; 7
			ADMUX_REG|=ADC_ChainChannel[ADC_ChainIndex];
     8ee:	97 b1       	in	r25, 0x07	; 7
     8f0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ADC_ChainIndex>
     8f4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <ADC_ChainChannel>
     8f8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <ADC_ChainChannel+0x1>
     8fc:	e8 0f       	add	r30, r24
     8fe:	f1 1d       	adc	r31, r1
     900:	80 81       	ld	r24, Z
     902:	89 2b       	or	r24, r25
     904:	87 b9       	out	0x07, r24	; 7
			/*Start conversion*/
			Set_Bit(ADCSRA_REG,ADSC);
     906:	86 b1       	in	r24, 0x06	; 6
     908:	80 64       	ori	r24, 0x40	; 64
     90a:	86 b9       	out	0x06, r24	; 6
		}
	}
     90c:	ff 91       	pop	r31
     90e:	ef 91       	pop	r30
     910:	bf 91       	pop	r27
     912:	af 91       	pop	r26
     914:	9f 91       	pop	r25
     916:	8f 91       	pop	r24
     918:	7f 91       	pop	r23
     91a:	6f 91       	pop	r22
     91c:	5f 91       	pop	r21
     91e:	4f 91       	pop	r20
     920:	3f 91       	pop	r19
     922:	2f 91       	pop	r18
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <DIO_set_pin_direction>:



void DIO_set_pin_direction(DIO_PORT_ID port_id,DIO_Pin_ID pin_id,EN_Dio_Direction direction)
{
	if((pin_id<=pin7)&&(port_id<=PORTD))
     92e:	68 30       	cpi	r22, 0x08	; 8
     930:	08 f0       	brcs	.+2      	; 0x934 <DIO_set_pin_direction+0x6>
     932:	75 c0       	rjmp	.+234    	; 0xa1e <DIO_set_pin_direction+0xf0>
     934:	84 30       	cpi	r24, 0x04	; 4
     936:	08 f0       	brcs	.+2      	; 0x93a <DIO_set_pin_direction+0xc>
     938:	72 c0       	rjmp	.+228    	; 0xa1e <DIO_set_pin_direction+0xf0>
	{
		if(direction==output)
     93a:	41 30       	cpi	r20, 0x01	; 1
     93c:	b9 f5       	brne	.+110    	; 0x9ac <DIO_set_pin_direction+0x7e>
		{
	
			switch(port_id)
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	91 f0       	breq	.+36     	; 0x966 <DIO_set_pin_direction+0x38>
     942:	28 f0       	brcs	.+10     	; 0x94e <DIO_set_pin_direction+0x20>
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	d9 f0       	breq	.+54     	; 0x97e <DIO_set_pin_direction+0x50>
     948:	83 30       	cpi	r24, 0x03	; 3
     94a:	29 f1       	breq	.+74     	; 0x996 <DIO_set_pin_direction+0x68>
     94c:	2f c0       	rjmp	.+94     	; 0x9ac <DIO_set_pin_direction+0x7e>
			{
				case PORTA: Set_Bit(DDRA_REG,pin_id);  break;
     94e:	9a b3       	in	r25, 0x1a	; 26
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	06 2e       	mov	r0, r22
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_set_pin_direction+0x2e>
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_set_pin_direction+0x2a>
     960:	29 2b       	or	r18, r25
     962:	2a bb       	out	0x1a, r18	; 26
     964:	23 c0       	rjmp	.+70     	; 0x9ac <DIO_set_pin_direction+0x7e>
				case PORTB: Set_Bit(DDRB_REG,pin_id);  break;
     966:	97 b3       	in	r25, 0x17	; 23
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	06 2e       	mov	r0, r22
     96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_set_pin_direction+0x46>
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	0a 94       	dec	r0
     976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_set_pin_direction+0x42>
     978:	29 2b       	or	r18, r25
     97a:	27 bb       	out	0x17, r18	; 23
     97c:	17 c0       	rjmp	.+46     	; 0x9ac <DIO_set_pin_direction+0x7e>
				case PORTC: Set_Bit(DDRC_REG,pin_id);  break;
     97e:	94 b3       	in	r25, 0x14	; 20
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	06 2e       	mov	r0, r22
     986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_set_pin_direction+0x5e>
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	0a 94       	dec	r0
     98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_set_pin_direction+0x5a>
     990:	29 2b       	or	r18, r25
     992:	24 bb       	out	0x14, r18	; 20
     994:	0b c0       	rjmp	.+22     	; 0x9ac <DIO_set_pin_direction+0x7e>
				case PORTD: Set_Bit(DDRD_REG,pin_id);  break;
     996:	91 b3       	in	r25, 0x11	; 17
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	06 2e       	mov	r0, r22
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_set_pin_direction+0x76>
     9a0:	22 0f       	add	r18, r18
     9a2:	33 1f       	adc	r19, r19
     9a4:	0a 94       	dec	r0
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_set_pin_direction+0x72>
     9a8:	29 2b       	or	r18, r25
     9aa:	21 bb       	out	0x11, r18	; 17
			}
		}
		if(direction==input)
     9ac:	41 11       	cpse	r20, r1
     9ae:	37 c0       	rjmp	.+110    	; 0xa1e <DIO_set_pin_direction+0xf0>
		{
			
			switch(port_id)
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	91 f0       	breq	.+36     	; 0x9d8 <DIO_set_pin_direction+0xaa>
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <DIO_set_pin_direction+0x92>
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	d9 f0       	breq	.+54     	; 0x9f0 <DIO_set_pin_direction+0xc2>
     9ba:	83 30       	cpi	r24, 0x03	; 3
     9bc:	29 f1       	breq	.+74     	; 0xa08 <DIO_set_pin_direction+0xda>
     9be:	08 95       	ret
			{
				case PORTA: Clear_Bit(DDRA_REG,pin_id);  break;
     9c0:	2a b3       	in	r18, 0x1a	; 26
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_set_pin_direction+0x9e>
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	6a 95       	dec	r22
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_set_pin_direction+0x9a>
     9d0:	80 95       	com	r24
     9d2:	82 23       	and	r24, r18
     9d4:	8a bb       	out	0x1a, r24	; 26
     9d6:	08 95       	ret
				case PORTB: Clear_Bit(DDRB_REG,pin_id);  break;
     9d8:	27 b3       	in	r18, 0x17	; 23
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_set_pin_direction+0xb6>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	6a 95       	dec	r22
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_set_pin_direction+0xb2>
     9e8:	80 95       	com	r24
     9ea:	82 23       	and	r24, r18
     9ec:	87 bb       	out	0x17, r24	; 23
     9ee:	08 95       	ret
				case PORTC: Clear_Bit(DDRC_REG,pin_id);  break;
     9f0:	24 b3       	in	r18, 0x14	; 20
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_set_pin_direction+0xce>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	6a 95       	dec	r22
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_set_pin_direction+0xca>
     a00:	80 95       	com	r24
     a02:	82 23       	and	r24, r18
     a04:	84 bb       	out	0x14, r24	; 20
     a06:	08 95       	ret
				case PORTD: Clear_Bit(DDRD_REG,pin_id);  break;
     a08:	21 b3       	in	r18, 0x11	; 17
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_set_pin_direction+0xe6>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	6a 95       	dec	r22
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_set_pin_direction+0xe2>
     a18:	80 95       	com	r24
     a1a:	82 23       	and	r24, r18
     a1c:	81 bb       	out	0x11, r24	; 17
     a1e:	08 95       	ret

00000a20 <DIO_set_pin_value>:
	}
}

void DIO_set_pin_value(DIO_PORT_ID port_id,DIO_Pin_ID pin_id,EN_Dio_Value val)
{
	if(port_id<=PORTD && pin_id<=pin7)
     a20:	84 30       	cpi	r24, 0x04	; 4
     a22:	08 f0       	brcs	.+2      	; 0xa26 <DIO_set_pin_value+0x6>
     a24:	75 c0       	rjmp	.+234    	; 0xb10 <DIO_set_pin_value+0xf0>
     a26:	68 30       	cpi	r22, 0x08	; 8
     a28:	08 f0       	brcs	.+2      	; 0xa2c <DIO_set_pin_value+0xc>
     a2a:	72 c0       	rjmp	.+228    	; 0xb10 <DIO_set_pin_value+0xf0>
	{
		if (val==LOW)
     a2c:	41 11       	cpse	r20, r1
     a2e:	3b c0       	rjmp	.+118    	; 0xaa6 <DIO_set_pin_value+0x86>
		{
			switch (port_id)
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	99 f0       	breq	.+38     	; 0xa5a <DIO_set_pin_value+0x3a>
     a34:	28 f0       	brcs	.+10     	; 0xa40 <DIO_set_pin_value+0x20>
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	e9 f0       	breq	.+58     	; 0xa74 <DIO_set_pin_value+0x54>
     a3a:	83 30       	cpi	r24, 0x03	; 3
     a3c:	41 f1       	breq	.+80     	; 0xa8e <DIO_set_pin_value+0x6e>
     a3e:	33 c0       	rjmp	.+102    	; 0xaa6 <DIO_set_pin_value+0x86>
			{
			case  PORTA : Clear_Bit(PORTA_REG,pin_id)        ; break;
     a40:	9b b3       	in	r25, 0x1b	; 27
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	06 2e       	mov	r0, r22
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_set_pin_value+0x2e>
     a4a:	22 0f       	add	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	0a 94       	dec	r0
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_set_pin_value+0x2a>
     a52:	20 95       	com	r18
     a54:	29 23       	and	r18, r25
     a56:	2b bb       	out	0x1b, r18	; 27
     a58:	26 c0       	rjmp	.+76     	; 0xaa6 <DIO_set_pin_value+0x86>
			case  PORTB : Clear_Bit(PORTB_REG,pin_id)        ; break;
     a5a:	98 b3       	in	r25, 0x18	; 24
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	06 2e       	mov	r0, r22
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_set_pin_value+0x48>
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	0a 94       	dec	r0
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_set_pin_value+0x44>
     a6c:	20 95       	com	r18
     a6e:	29 23       	and	r18, r25
     a70:	28 bb       	out	0x18, r18	; 24
     a72:	19 c0       	rjmp	.+50     	; 0xaa6 <DIO_set_pin_value+0x86>
			case  PORTC : Clear_Bit(PORTC_REG,pin_id)        ; break;
     a74:	95 b3       	in	r25, 0x15	; 21
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	06 2e       	mov	r0, r22
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <DIO_set_pin_value+0x62>
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	0a 94       	dec	r0
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <DIO_set_pin_value+0x5e>
     a86:	20 95       	com	r18
     a88:	29 23       	and	r18, r25
     a8a:	25 bb       	out	0x15, r18	; 21
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <DIO_set_pin_value+0x86>
			case  PORTD : Clear_Bit(PORTD_REG,pin_id)        ; break;
     a8e:	92 b3       	in	r25, 0x12	; 18
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	06 2e       	mov	r0, r22
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <DIO_set_pin_value+0x7c>
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	0a 94       	dec	r0
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <DIO_set_pin_value+0x78>
     aa0:	20 95       	com	r18
     aa2:	29 23       	and	r18, r25
     aa4:	22 bb       	out	0x12, r18	; 18
			}
		}
		if (val==HIGH)
     aa6:	41 30       	cpi	r20, 0x01	; 1
     aa8:	99 f5       	brne	.+102    	; 0xb10 <DIO_set_pin_value+0xf0>
		{
			switch (port_id)
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	89 f0       	breq	.+34     	; 0xad0 <DIO_set_pin_value+0xb0>
     aae:	28 f0       	brcs	.+10     	; 0xaba <DIO_set_pin_value+0x9a>
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	c9 f0       	breq	.+50     	; 0xae6 <DIO_set_pin_value+0xc6>
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	11 f1       	breq	.+68     	; 0xafc <DIO_set_pin_value+0xdc>
     ab8:	08 95       	ret
			{
				case  PORTA : Set_Bit(PORTA_REG,pin_id)        ; break;
     aba:	2b b3       	in	r18, 0x1b	; 27
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_set_pin_value+0xa6>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	6a 95       	dec	r22
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_set_pin_value+0xa2>
     aca:	82 2b       	or	r24, r18
     acc:	8b bb       	out	0x1b, r24	; 27
     ace:	08 95       	ret
				case  PORTB : Set_Bit(PORTB_REG,pin_id)        ; break;
     ad0:	28 b3       	in	r18, 0x18	; 24
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_set_pin_value+0xbc>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	6a 95       	dec	r22
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_set_pin_value+0xb8>
     ae0:	82 2b       	or	r24, r18
     ae2:	88 bb       	out	0x18, r24	; 24
     ae4:	08 95       	ret
				case  PORTC : Set_Bit(PORTC_REG,pin_id)        ; break;
     ae6:	25 b3       	in	r18, 0x15	; 21
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_set_pin_value+0xd2>
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	6a 95       	dec	r22
     af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_set_pin_value+0xce>
     af6:	82 2b       	or	r24, r18
     af8:	85 bb       	out	0x15, r24	; 21
     afa:	08 95       	ret
				case  PORTD : Set_Bit(PORTD_REG,pin_id)        ; break;
     afc:	22 b3       	in	r18, 0x12	; 18
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_set_pin_value+0xe8>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	6a 95       	dec	r22
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_set_pin_value+0xe4>
     b0c:	82 2b       	or	r24, r18
     b0e:	82 bb       	out	0x12, r24	; 18
     b10:	08 95       	ret

00000b12 <DIO_get_pin_value>:
	
}

void DIO_get_pin_value(DIO_PORT_ID port_id,DIO_Pin_ID pin_id,EN_Dio_Value *val)
{
	if(port_id<=PORTD && pin_id<=pin7)
     b12:	84 30       	cpi	r24, 0x04	; 4
     b14:	a8 f5       	brcc	.+106    	; 0xb80 <DIO_get_pin_value+0x6e>
     b16:	68 30       	cpi	r22, 0x08	; 8
     b18:	98 f5       	brcc	.+102    	; 0xb80 <DIO_get_pin_value+0x6e>
	{
		switch(port_id)
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	89 f0       	breq	.+34     	; 0xb40 <DIO_get_pin_value+0x2e>
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <DIO_get_pin_value+0x18>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	c9 f0       	breq	.+50     	; 0xb56 <DIO_get_pin_value+0x44>
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	11 f1       	breq	.+68     	; 0xb6c <DIO_get_pin_value+0x5a>
     b28:	08 95       	ret
		{
			case PORTA: *val= Get_Bit(PINA_REG,pin_id)  ;    break;
     b2a:	89 b3       	in	r24, 0x19	; 25
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_get_pin_value+0x22>
     b30:	95 95       	asr	r25
     b32:	87 95       	ror	r24
     b34:	6a 95       	dec	r22
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_get_pin_value+0x1e>
     b38:	81 70       	andi	r24, 0x01	; 1
     b3a:	fa 01       	movw	r30, r20
     b3c:	80 83       	st	Z, r24
     b3e:	08 95       	ret
			case PORTB: *val= Get_Bit(PINB_REG,pin_id)  ;    break;
     b40:	86 b3       	in	r24, 0x16	; 22
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_get_pin_value+0x38>
     b46:	95 95       	asr	r25
     b48:	87 95       	ror	r24
     b4a:	6a 95       	dec	r22
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_get_pin_value+0x34>
     b4e:	81 70       	andi	r24, 0x01	; 1
     b50:	fa 01       	movw	r30, r20
     b52:	80 83       	st	Z, r24
     b54:	08 95       	ret
			case PORTC: *val= Get_Bit(PINC_REG,pin_id)  ;    break;
     b56:	83 b3       	in	r24, 0x13	; 19
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_get_pin_value+0x4e>
     b5c:	95 95       	asr	r25
     b5e:	87 95       	ror	r24
     b60:	6a 95       	dec	r22
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_get_pin_value+0x4a>
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	fa 01       	movw	r30, r20
     b68:	80 83       	st	Z, r24
     b6a:	08 95       	ret
			case PORTD: *val= Get_Bit(PIND_REG,pin_id)  ;    break;
     b6c:	80 b3       	in	r24, 0x10	; 16
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_get_pin_value+0x64>
     b72:	95 95       	asr	r25
     b74:	87 95       	ror	r24
     b76:	6a 95       	dec	r22
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_get_pin_value+0x60>
     b7a:	81 70       	andi	r24, 0x01	; 1
     b7c:	fa 01       	movw	r30, r20
     b7e:	80 83       	st	Z, r24
     b80:	08 95       	ret

00000b82 <DIO_set_port_char>:
}


void DIO_set_port_char(DIO_PORT_ID port_id,EN_Dio_Value val)
{
	if(port_id<=PORTD)
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	78 f4       	brcc	.+30     	; 0xba4 <DIO_set_port_char+0x22>
	{
			switch(port_id)
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	41 f0       	breq	.+16     	; 0xb9a <DIO_set_port_char+0x18>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <DIO_set_port_char+0x14>
     b8c:	82 30       	cpi	r24, 0x02	; 2
     b8e:	39 f0       	breq	.+14     	; 0xb9e <DIO_set_port_char+0x1c>
     b90:	83 30       	cpi	r24, 0x03	; 3
     b92:	39 f0       	breq	.+14     	; 0xba2 <DIO_set_port_char+0x20>
     b94:	08 95       	ret
			{
				case PORTA: PORTA_REG=val         ;    break;
     b96:	6b bb       	out	0x1b, r22	; 27
     b98:	08 95       	ret
				case PORTB: PORTB_REG=val         ;    break;
     b9a:	68 bb       	out	0x18, r22	; 24
     b9c:	08 95       	ret
				case PORTC: PORTC_REG=val         ;    break;
     b9e:	65 bb       	out	0x15, r22	; 21
     ba0:	08 95       	ret
				case PORTD: PORTD_REG=val         ;    break;
     ba2:	62 bb       	out	0x12, r22	; 18
     ba4:	08 95       	ret

00000ba6 <global_inti_Enable>:
 */ 
#include "Interrupt.h"

void global_inti_Enable()
{
	SREG_REG|=(1<<7); // for global interrupt
     ba6:	8f b7       	in	r24, 0x3f	; 63
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	8f bf       	out	0x3f, r24	; 63
     bac:	08 95       	ret

00000bae <EXT0_Interrupt_enable>:
}

void EXT0_Interrupt_enable()
{
	/*select sensing signal : we select rising edge */
	Set_Bit(MCUCR_REG,MCUCR_ISC00);
     bae:	85 b7       	in	r24, 0x35	; 53
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	85 bf       	out	0x35, r24	; 53
	Set_Bit(MCUCR_REG,MCUCR_ISC01);
     bb4:	85 b7       	in	r24, 0x35	; 53
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	85 bf       	out	0x35, r24	; 53
	/*we should clear flag of interrupt 0 by (set 1 on it )*/
	Set_Bit(GIFR_REG,GIFR_INT0);
     bba:	8a b7       	in	r24, 0x3a	; 58
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8a bf       	out	0x3a, r24	; 58
	/*External interrupt request enable*/
	Set_Bit(GICR_REG,GICR_INT0);
     bc0:	8b b7       	in	r24, 0x3b	; 59
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	8b bf       	out	0x3b, r24	; 59
     bc6:	08 95       	ret

00000bc8 <EXT1_Interrupt_enable>:
}

void EXT1_Interrupt_enable()
{
	/*select sensing signal : we select rising edge */
	Set_Bit(MCUCR_REG,MCUCR_ISC10); 
     bc8:	85 b7       	in	r24, 0x35	; 53
     bca:	84 60       	ori	r24, 0x04	; 4
     bcc:	85 bf       	out	0x35, r24	; 53
	Set_Bit(MCUCR_REG,MCUCR_ISC11);
     bce:	85 b7       	in	r24, 0x35	; 53
     bd0:	88 60       	ori	r24, 0x08	; 8
     bd2:	85 bf       	out	0x35, r24	; 53
	/*we should clear flag of interrupt 0 by (set 1 on it )*/
	Set_Bit(GIFR_REG,GIFR_INT1);
     bd4:	8a b7       	in	r24, 0x3a	; 58
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	8a bf       	out	0x3a, r24	; 58
	/*External interrupt request enable*/
	Set_Bit(GICR_REG,GICR_INT1);
     bda:	8b b7       	in	r24, 0x3b	; 59
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	8b bf       	out	0x3b, r24	; 59
     be0:	08 95       	ret

00000be2 <Timer0_init>:
	Set_Bit(TCCR1B_REG,TCCR1B_CS11);
	Clear_Bit(TCCR1B_REG,TCCR1B_CS10);
}
void Timer1_voidSetChannelACompValue(uint16 copy_u16Value)
{
	OCR1A_REG= copy_u16Value;
     be2:	83 b7       	in	r24, 0x33	; 51
     be4:	8f 7b       	andi	r24, 0xBF	; 191
     be6:	83 bf       	out	0x33, r24	; 51
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	87 7f       	andi	r24, 0xF7	; 247
     bec:	83 bf       	out	0x33, r24	; 51
     bee:	8c e2       	ldi	r24, 0x2C	; 44
     bf0:	82 bf       	out	0x32, r24	; 50
     bf2:	89 b7       	in	r24, 0x39	; 57
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	89 bf       	out	0x39, r24	; 57
     bf8:	83 b7       	in	r24, 0x33	; 51
     bfa:	88 7f       	andi	r24, 0xF8	; 248
     bfc:	83 bf       	out	0x33, r24	; 51
     bfe:	83 b7       	in	r24, 0x33	; 51
     c00:	82 60       	ori	r24, 0x02	; 2
     c02:	83 bf       	out	0x33, r24	; 51
     c04:	08 95       	ret

00000c06 <timer0_setCallBack>:
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	31 f0       	breq	.+12     	; 0xc16 <timer0_setCallBack+0x10>
     c0a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <timer0_pCallbackFunc+0x1>
     c0e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <timer0_pCallbackFunc>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	08 95       	ret
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	08 95       	ret

00000c1a <__vector_11>:
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	5f 93       	push	r21
     c2c:	6f 93       	push	r22
     c2e:	7f 93       	push	r23
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	af 93       	push	r26
     c36:	bf 93       	push	r27
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
     c3c:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <timer0_pCallbackFunc>
     c40:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <timer0_pCallbackFunc+0x1>
     c44:	30 97       	sbiw	r30, 0x00	; 0
     c46:	09 f0       	breq	.+2      	; 0xc4a <__vector_11+0x30>
     c48:	09 95       	icall
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_10>:
}


void __vector_10 (void)  __attribute__((signal));
void __vector_10(void)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
	if((timer0_pCompareCallbaxkFunc)!=NULL)
     c8e:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <timer0_pCompareCallbaxkFunc>
     c92:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <timer0_pCompareCallbaxkFunc+0x1>
     c96:	30 97       	sbiw	r30, 0x00	; 0
     c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_10+0x30>
	{
		timer0_pCompareCallbaxkFunc();
     c9a:	09 95       	icall
	}
	else
	{
		//nothing
	}
}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__divsf3>:
     cbe:	0e 94 73 06 	call	0xce6	; 0xce6 <__divsf3x>
     cc2:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_round>
     cc6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_pscB>
     cca:	58 f0       	brcs	.+22     	; 0xce2 <__divsf3+0x24>
     ccc:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscA>
     cd0:	40 f0       	brcs	.+16     	; 0xce2 <__divsf3+0x24>
     cd2:	29 f4       	brne	.+10     	; 0xcde <__divsf3+0x20>
     cd4:	5f 3f       	cpi	r21, 0xFF	; 255
     cd6:	29 f0       	breq	.+10     	; 0xce2 <__divsf3+0x24>
     cd8:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     cdc:	51 11       	cpse	r21, r1
     cde:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     ce2:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>

00000ce6 <__divsf3x>:
     ce6:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_split3>
     cea:	68 f3       	brcs	.-38     	; 0xcc6 <__divsf3+0x8>

00000cec <__divsf3_pse>:
     cec:	99 23       	and	r25, r25
     cee:	b1 f3       	breq	.-20     	; 0xcdc <__divsf3+0x1e>
     cf0:	55 23       	and	r21, r21
     cf2:	91 f3       	breq	.-28     	; 0xcd8 <__divsf3+0x1a>
     cf4:	95 1b       	sub	r25, r21
     cf6:	55 0b       	sbc	r21, r21
     cf8:	bb 27       	eor	r27, r27
     cfa:	aa 27       	eor	r26, r26
     cfc:	62 17       	cp	r22, r18
     cfe:	73 07       	cpc	r23, r19
     d00:	84 07       	cpc	r24, r20
     d02:	38 f0       	brcs	.+14     	; 0xd12 <__divsf3_pse+0x26>
     d04:	9f 5f       	subi	r25, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	44 1f       	adc	r20, r20
     d0e:	aa 1f       	adc	r26, r26
     d10:	a9 f3       	breq	.-22     	; 0xcfc <__divsf3_pse+0x10>
     d12:	35 d0       	rcall	.+106    	; 0xd7e <__divsf3_pse+0x92>
     d14:	0e 2e       	mov	r0, r30
     d16:	3a f0       	brmi	.+14     	; 0xd26 <__divsf3_pse+0x3a>
     d18:	e0 e8       	ldi	r30, 0x80	; 128
     d1a:	32 d0       	rcall	.+100    	; 0xd80 <__divsf3_pse+0x94>
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	50 40       	sbci	r21, 0x00	; 0
     d20:	e6 95       	lsr	r30
     d22:	00 1c       	adc	r0, r0
     d24:	ca f7       	brpl	.-14     	; 0xd18 <__divsf3_pse+0x2c>
     d26:	2b d0       	rcall	.+86     	; 0xd7e <__divsf3_pse+0x92>
     d28:	fe 2f       	mov	r31, r30
     d2a:	29 d0       	rcall	.+82     	; 0xd7e <__divsf3_pse+0x92>
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	88 1f       	adc	r24, r24
     d32:	bb 1f       	adc	r27, r27
     d34:	26 17       	cp	r18, r22
     d36:	37 07       	cpc	r19, r23
     d38:	48 07       	cpc	r20, r24
     d3a:	ab 07       	cpc	r26, r27
     d3c:	b0 e8       	ldi	r27, 0x80	; 128
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__divsf3_pse+0x56>
     d40:	bb 0b       	sbc	r27, r27
     d42:	80 2d       	mov	r24, r0
     d44:	bf 01       	movw	r22, r30
     d46:	ff 27       	eor	r31, r31
     d48:	93 58       	subi	r25, 0x83	; 131
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	3a f0       	brmi	.+14     	; 0xd5c <__divsf3_pse+0x70>
     d4e:	9e 3f       	cpi	r25, 0xFE	; 254
     d50:	51 05       	cpc	r21, r1
     d52:	78 f0       	brcs	.+30     	; 0xd72 <__divsf3_pse+0x86>
     d54:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     d58:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	e4 f3       	brlt	.-8      	; 0xd58 <__divsf3_pse+0x6c>
     d60:	98 3e       	cpi	r25, 0xE8	; 232
     d62:	d4 f3       	brlt	.-12     	; 0xd58 <__divsf3_pse+0x6c>
     d64:	86 95       	lsr	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f7 95       	ror	r31
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	c9 f7       	brne	.-14     	; 0xd64 <__divsf3_pse+0x78>
     d72:	88 0f       	add	r24, r24
     d74:	91 1d       	adc	r25, r1
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	97 f9       	bld	r25, 7
     d7c:	08 95       	ret
     d7e:	e1 e0       	ldi	r30, 0x01	; 1
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	bb 1f       	adc	r27, r27
     d88:	62 17       	cp	r22, r18
     d8a:	73 07       	cpc	r23, r19
     d8c:	84 07       	cpc	r24, r20
     d8e:	ba 07       	cpc	r27, r26
     d90:	20 f0       	brcs	.+8      	; 0xd9a <__divsf3_pse+0xae>
     d92:	62 1b       	sub	r22, r18
     d94:	73 0b       	sbc	r23, r19
     d96:	84 0b       	sbc	r24, r20
     d98:	ba 0b       	sbc	r27, r26
     d9a:	ee 1f       	adc	r30, r30
     d9c:	88 f7       	brcc	.-30     	; 0xd80 <__divsf3_pse+0x94>
     d9e:	e0 95       	com	r30
     da0:	08 95       	ret

00000da2 <__fixunssfsi>:
     da2:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_splitA>
     da6:	88 f0       	brcs	.+34     	; 0xdca <__fixunssfsi+0x28>
     da8:	9f 57       	subi	r25, 0x7F	; 127
     daa:	98 f0       	brcs	.+38     	; 0xdd2 <__fixunssfsi+0x30>
     dac:	b9 2f       	mov	r27, r25
     dae:	99 27       	eor	r25, r25
     db0:	b7 51       	subi	r27, 0x17	; 23
     db2:	b0 f0       	brcs	.+44     	; 0xde0 <__fixunssfsi+0x3e>
     db4:	e1 f0       	breq	.+56     	; 0xdee <__fixunssfsi+0x4c>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	1a f0       	brmi	.+6      	; 0xdc6 <__fixunssfsi+0x24>
     dc0:	ba 95       	dec	r27
     dc2:	c9 f7       	brne	.-14     	; 0xdb6 <__fixunssfsi+0x14>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <__fixunssfsi+0x4c>
     dc6:	b1 30       	cpi	r27, 0x01	; 1
     dc8:	91 f0       	breq	.+36     	; 0xdee <__fixunssfsi+0x4c>
     dca:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_zero>
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	08 95       	ret
     dd2:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__fp_zero>
     dd6:	67 2f       	mov	r22, r23
     dd8:	78 2f       	mov	r23, r24
     dda:	88 27       	eor	r24, r24
     ddc:	b8 5f       	subi	r27, 0xF8	; 248
     dde:	39 f0       	breq	.+14     	; 0xdee <__fixunssfsi+0x4c>
     de0:	b9 3f       	cpi	r27, 0xF9	; 249
     de2:	cc f3       	brlt	.-14     	; 0xdd6 <__fixunssfsi+0x34>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b3 95       	inc	r27
     dec:	d9 f7       	brne	.-10     	; 0xde4 <__fixunssfsi+0x42>
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__fixunssfsi+0x5c>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	08 95       	ret

00000e00 <__floatunsisf>:
     e00:	e8 94       	clt
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <__floatsisf+0x12>

00000e04 <__floatsisf>:
     e04:	97 fb       	bst	r25, 7
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__floatsisf+0x12>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	99 23       	and	r25, r25
     e18:	a9 f0       	breq	.+42     	; 0xe44 <__floatsisf+0x40>
     e1a:	f9 2f       	mov	r31, r25
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	bb 27       	eor	r27, r27
     e20:	93 95       	inc	r25
     e22:	f6 95       	lsr	r31
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f1 11       	cpse	r31, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__floatsisf+0x1c>
     e30:	fa f4       	brpl	.+62     	; 0xe70 <__floatsisf+0x6c>
     e32:	bb 0f       	add	r27, r27
     e34:	11 f4       	brne	.+4      	; 0xe3a <__floatsisf+0x36>
     e36:	60 ff       	sbrs	r22, 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <__floatsisf+0x6c>
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	8f 4f       	sbci	r24, 0xFF	; 255
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <__floatsisf+0x6c>
     e44:	88 23       	and	r24, r24
     e46:	11 f0       	breq	.+4      	; 0xe4c <__floatsisf+0x48>
     e48:	96 e9       	ldi	r25, 0x96	; 150
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <__floatsisf+0x6a>
     e4c:	77 23       	and	r23, r23
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__floatsisf+0x54>
     e50:	9e e8       	ldi	r25, 0x8E	; 142
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__floatsisf+0x5e>
     e58:	66 23       	and	r22, r22
     e5a:	71 f0       	breq	.+28     	; 0xe78 <__floatsisf+0x74>
     e5c:	96 e8       	ldi	r25, 0x86	; 134
     e5e:	86 2f       	mov	r24, r22
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	2a f0       	brmi	.+10     	; 0xe70 <__floatsisf+0x6c>
     e66:	9a 95       	dec	r25
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	da f7       	brpl	.-10     	; 0xe66 <__floatsisf+0x62>
     e70:	88 0f       	add	r24, r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__fp_inf>:
     e7a:	97 f9       	bld	r25, 7
     e7c:	9f 67       	ori	r25, 0x7F	; 127
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_pscA>:
     e8c:	00 24       	eor	r0, r0
     e8e:	0a 94       	dec	r0
     e90:	16 16       	cp	r1, r22
     e92:	17 06       	cpc	r1, r23
     e94:	18 06       	cpc	r1, r24
     e96:	09 06       	cpc	r0, r25
     e98:	08 95       	ret

00000e9a <__fp_pscB>:
     e9a:	00 24       	eor	r0, r0
     e9c:	0a 94       	dec	r0
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	14 06       	cpc	r1, r20
     ea4:	05 06       	cpc	r0, r21
     ea6:	08 95       	ret

00000ea8 <__fp_round>:
     ea8:	09 2e       	mov	r0, r25
     eaa:	03 94       	inc	r0
     eac:	00 0c       	add	r0, r0
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0xc>
     eb0:	88 23       	and	r24, r24
     eb2:	52 f0       	brmi	.+20     	; 0xec8 <__fp_round+0x20>
     eb4:	bb 0f       	add	r27, r27
     eb6:	40 f4       	brcc	.+16     	; 0xec8 <__fp_round+0x20>
     eb8:	bf 2b       	or	r27, r31
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0x18>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <__fp_round+0x20>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	08 95       	ret

00000eca <__fp_split3>:
     eca:	57 fd       	sbrc	r21, 7
     ecc:	90 58       	subi	r25, 0x80	; 128
     ece:	44 0f       	add	r20, r20
     ed0:	55 1f       	adc	r21, r21
     ed2:	59 f0       	breq	.+22     	; 0xeea <__fp_splitA+0x10>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	71 f0       	breq	.+28     	; 0xef4 <__fp_splitA+0x1a>
     ed8:	47 95       	ror	r20

00000eda <__fp_splitA>:
     eda:	88 0f       	add	r24, r24
     edc:	97 fb       	bst	r25, 7
     ede:	99 1f       	adc	r25, r25
     ee0:	61 f0       	breq	.+24     	; 0xefa <__fp_splitA+0x20>
     ee2:	9f 3f       	cpi	r25, 0xFF	; 255
     ee4:	79 f0       	breq	.+30     	; 0xf04 <__fp_splitA+0x2a>
     ee6:	87 95       	ror	r24
     ee8:	08 95       	ret
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	14 06       	cpc	r1, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <__fp_split3+0xe>
     ef4:	46 95       	lsr	r20
     ef6:	f1 df       	rcall	.-30     	; 0xeda <__fp_splitA>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <__fp_splitA+0x30>
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	99 1f       	adc	r25, r25
     f02:	f1 cf       	rjmp	.-30     	; 0xee6 <__fp_splitA+0xc>
     f04:	86 95       	lsr	r24
     f06:	71 05       	cpc	r23, r1
     f08:	61 05       	cpc	r22, r1
     f0a:	08 94       	sec
     f0c:	08 95       	ret

00000f0e <__fp_zero>:
     f0e:	e8 94       	clt

00000f10 <__fp_szero>:
     f10:	bb 27       	eor	r27, r27
     f12:	66 27       	eor	r22, r22
     f14:	77 27       	eor	r23, r23
     f16:	cb 01       	movw	r24, r22
     f18:	97 f9       	bld	r25, 7
     f1a:	08 95       	ret

00000f1c <__mulsf3>:
     f1c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__mulsf3x>
     f20:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_round>
     f24:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscA>
     f28:	38 f0       	brcs	.+14     	; 0xf38 <__mulsf3+0x1c>
     f2a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_pscB>
     f2e:	20 f0       	brcs	.+8      	; 0xf38 <__mulsf3+0x1c>
     f30:	95 23       	and	r25, r21
     f32:	11 f0       	breq	.+4      	; 0xf38 <__mulsf3+0x1c>
     f34:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     f38:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>
     f3c:	11 24       	eor	r1, r1
     f3e:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>

00000f42 <__mulsf3x>:
     f42:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_split3>
     f46:	70 f3       	brcs	.-36     	; 0xf24 <__mulsf3+0x8>

00000f48 <__mulsf3_pse>:
     f48:	95 9f       	mul	r25, r21
     f4a:	c1 f3       	breq	.-16     	; 0xf3c <__mulsf3+0x20>
     f4c:	95 0f       	add	r25, r21
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	55 1f       	adc	r21, r21
     f52:	62 9f       	mul	r22, r18
     f54:	f0 01       	movw	r30, r0
     f56:	72 9f       	mul	r23, r18
     f58:	bb 27       	eor	r27, r27
     f5a:	f0 0d       	add	r31, r0
     f5c:	b1 1d       	adc	r27, r1
     f5e:	63 9f       	mul	r22, r19
     f60:	aa 27       	eor	r26, r26
     f62:	f0 0d       	add	r31, r0
     f64:	b1 1d       	adc	r27, r1
     f66:	aa 1f       	adc	r26, r26
     f68:	64 9f       	mul	r22, r20
     f6a:	66 27       	eor	r22, r22
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	66 1f       	adc	r22, r22
     f72:	82 9f       	mul	r24, r18
     f74:	22 27       	eor	r18, r18
     f76:	b0 0d       	add	r27, r0
     f78:	a1 1d       	adc	r26, r1
     f7a:	62 1f       	adc	r22, r18
     f7c:	73 9f       	mul	r23, r19
     f7e:	b0 0d       	add	r27, r0
     f80:	a1 1d       	adc	r26, r1
     f82:	62 1f       	adc	r22, r18
     f84:	83 9f       	mul	r24, r19
     f86:	a0 0d       	add	r26, r0
     f88:	61 1d       	adc	r22, r1
     f8a:	22 1f       	adc	r18, r18
     f8c:	74 9f       	mul	r23, r20
     f8e:	33 27       	eor	r19, r19
     f90:	a0 0d       	add	r26, r0
     f92:	61 1d       	adc	r22, r1
     f94:	23 1f       	adc	r18, r19
     f96:	84 9f       	mul	r24, r20
     f98:	60 0d       	add	r22, r0
     f9a:	21 1d       	adc	r18, r1
     f9c:	82 2f       	mov	r24, r18
     f9e:	76 2f       	mov	r23, r22
     fa0:	6a 2f       	mov	r22, r26
     fa2:	11 24       	eor	r1, r1
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	50 40       	sbci	r21, 0x00	; 0
     fa8:	9a f0       	brmi	.+38     	; 0xfd0 <__mulsf3_pse+0x88>
     faa:	f1 f0       	breq	.+60     	; 0xfe8 <__mulsf3_pse+0xa0>
     fac:	88 23       	and	r24, r24
     fae:	4a f0       	brmi	.+18     	; 0xfc2 <__mulsf3_pse+0x7a>
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	bb 1f       	adc	r27, r27
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	91 50       	subi	r25, 0x01	; 1
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__mulsf3_pse+0x64>
     fc2:	9e 3f       	cpi	r25, 0xFE	; 254
     fc4:	51 05       	cpc	r21, r1
     fc6:	80 f0       	brcs	.+32     	; 0xfe8 <__mulsf3_pse+0xa0>
     fc8:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     fcc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     fd0:	5f 3f       	cpi	r21, 0xFF	; 255
     fd2:	e4 f3       	brlt	.-8      	; 0xfcc <__mulsf3_pse+0x84>
     fd4:	98 3e       	cpi	r25, 0xE8	; 232
     fd6:	d4 f3       	brlt	.-12     	; 0xfcc <__mulsf3_pse+0x84>
     fd8:	86 95       	lsr	r24
     fda:	77 95       	ror	r23
     fdc:	67 95       	ror	r22
     fde:	b7 95       	ror	r27
     fe0:	f7 95       	ror	r31
     fe2:	e7 95       	ror	r30
     fe4:	9f 5f       	subi	r25, 0xFF	; 255
     fe6:	c1 f7       	brne	.-16     	; 0xfd8 <__mulsf3_pse+0x90>
     fe8:	fe 2b       	or	r31, r30
     fea:	88 0f       	add	r24, r24
     fec:	91 1d       	adc	r25, r1
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret

00000ff6 <__umulhisi3>:
     ff6:	a2 9f       	mul	r26, r18
     ff8:	b0 01       	movw	r22, r0
     ffa:	b3 9f       	mul	r27, r19
     ffc:	c0 01       	movw	r24, r0
     ffe:	a3 9f       	mul	r26, r19
    1000:	70 0d       	add	r23, r0
    1002:	81 1d       	adc	r24, r1
    1004:	11 24       	eor	r1, r1
    1006:	91 1d       	adc	r25, r1
    1008:	b2 9f       	mul	r27, r18
    100a:	70 0d       	add	r23, r0
    100c:	81 1d       	adc	r24, r1
    100e:	11 24       	eor	r1, r1
    1010:	91 1d       	adc	r25, r1
    1012:	08 95       	ret

00001014 <__itoa_ncheck>:
    1014:	bb 27       	eor	r27, r27
    1016:	4a 30       	cpi	r20, 0x0A	; 10
    1018:	31 f4       	brne	.+12     	; 0x1026 <__itoa_ncheck+0x12>
    101a:	99 23       	and	r25, r25
    101c:	22 f4       	brpl	.+8      	; 0x1026 <__itoa_ncheck+0x12>
    101e:	bd e2       	ldi	r27, 0x2D	; 45
    1020:	90 95       	com	r25
    1022:	81 95       	neg	r24
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	0c 94 16 08 	jmp	0x102c	; 0x102c <__utoa_common>

0000102a <__utoa_ncheck>:
    102a:	bb 27       	eor	r27, r27

0000102c <__utoa_common>:
    102c:	fb 01       	movw	r30, r22
    102e:	55 27       	eor	r21, r21
    1030:	aa 27       	eor	r26, r26
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	aa 1f       	adc	r26, r26
    1038:	a4 17       	cp	r26, r20
    103a:	10 f0       	brcs	.+4      	; 0x1040 <__utoa_common+0x14>
    103c:	a4 1b       	sub	r26, r20
    103e:	83 95       	inc	r24
    1040:	50 51       	subi	r21, 0x10	; 16
    1042:	b9 f7       	brne	.-18     	; 0x1032 <__utoa_common+0x6>
    1044:	a0 5d       	subi	r26, 0xD0	; 208
    1046:	aa 33       	cpi	r26, 0x3A	; 58
    1048:	08 f0       	brcs	.+2      	; 0x104c <__utoa_common+0x20>
    104a:	a9 5d       	subi	r26, 0xD9	; 217
    104c:	a1 93       	st	Z+, r26
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	79 f7       	brne	.-34     	; 0x1030 <__utoa_common+0x4>
    1052:	b1 11       	cpse	r27, r1
    1054:	b1 93       	st	Z+, r27
    1056:	11 92       	st	Z+, r1
    1058:	cb 01       	movw	r24, r22
    105a:	0c 94 2f 08 	jmp	0x105e	; 0x105e <strrev>

0000105e <strrev>:
    105e:	dc 01       	movw	r26, r24
    1060:	fc 01       	movw	r30, r24
    1062:	67 2f       	mov	r22, r23
    1064:	71 91       	ld	r23, Z+
    1066:	77 23       	and	r23, r23
    1068:	e1 f7       	brne	.-8      	; 0x1062 <strrev+0x4>
    106a:	32 97       	sbiw	r30, 0x02	; 2
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <strrev+0x18>
    106e:	7c 91       	ld	r23, X
    1070:	6d 93       	st	X+, r22
    1072:	70 83       	st	Z, r23
    1074:	62 91       	ld	r22, -Z
    1076:	ae 17       	cp	r26, r30
    1078:	bf 07       	cpc	r27, r31
    107a:	c8 f3       	brcs	.-14     	; 0x106e <strrev+0x10>
    107c:	08 95       	ret

0000107e <_exit>:
    107e:	f8 94       	cli

00001080 <__stop_program>:
    1080:	ff cf       	rjmp	.-2      	; 0x1080 <__stop_program>
